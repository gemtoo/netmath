diff --git a/examples/fullstack-auth/src/main.rs b/examples/fullstack-auth/src/main.rs
index ec80979..5e2fb95 100644
--- a/examples/fullstack-auth/src/main.rs
+++ b/examples/fullstack-auth/src/main.rs
@@ -62,7 +62,7 @@ fn main() {
                     .layer(axum_session::SessionLayer::new(session_store));
 
                 // run it
-                let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 3000));
+                let addr = std::net::SocketAddr::from(([0, 0, 0, 0], 3000));
                 let listener = tokio::net::TcpListener::bind(&addr).await.unwrap();
 
                 axum::serve(listener, app.into_make_service())
diff --git a/examples/fullstack-desktop/src/main.rs b/examples/fullstack-desktop/src/main.rs
index 0e39cc6..d197ba7 100644
--- a/examples/fullstack-desktop/src/main.rs
+++ b/examples/fullstack-desktop/src/main.rs
@@ -4,7 +4,7 @@ use dioxus::prelude::*;
 fn main() {
     // Set the url of the server where server functions are hosted.
     #[cfg(not(feature = "server"))]
-    dioxus::fullstack::prelude::server_fn::client::set_server_url("http://127.0.0.1:8080");
+    dioxus::fullstack::prelude::server_fn::client::set_server_url("http://0.0.0.0:8080");
     launch(app);
 }
 
diff --git a/packages/cli-config/src/lib.rs b/packages/cli-config/src/lib.rs
index 70ee071..a2158a0 100644
--- a/packages/cli-config/src/lib.rs
+++ b/packages/cli-config/src/lib.rs
@@ -45,7 +45,7 @@ pub fn server_port() -> Option<u16> {
 }
 
 pub fn fullstack_address_or_localhost() -> SocketAddr {
-    let ip = server_ip().unwrap_or_else(|| IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));
+    let ip = server_ip().unwrap_or_else(|| IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)));
     let port = server_port().unwrap_or(8080);
     SocketAddr::new(ip, port)
 }
diff --git a/packages/cli/src/config.rs b/packages/cli/src/config.rs
index dfa13bf..cd9151e 100644
--- a/packages/cli/src/config.rs
+++ b/packages/cli/src/config.rs
@@ -674,5 +674,5 @@ fn default_port() -> u16 {
 }
 
 fn default_address() -> IpAddr {
-    IpAddr::V4(std::net::Ipv4Addr::new(127, 0, 0, 1))
+    IpAddr::V4(std::net::Ipv4Addr::new(0, 0, 0, 0))
 }
diff --git a/packages/cli/src/serve/proxy.rs b/packages/cli/src/serve/proxy.rs
index 9819462..156df86 100644
--- a/packages/cli/src/serve/proxy.rs
+++ b/packages/cli/src/serve/proxy.rs
@@ -197,7 +197,7 @@ mod test {
         let backend_handle_handle = Handle::new();
         let backend_handle_handle_ = backend_handle_handle.clone();
         tokio::spawn(async move {
-            Server::bind("127.0.0.1:0".parse().unwrap())
+            Server::bind("0.0.0.0:0".parse().unwrap())
                 .handle(backend_handle_handle_)
                 .serve(backend_router.into_make_service())
                 .await
@@ -213,7 +213,7 @@ mod test {
         let server_handle_handle = Handle::new();
         let server_handle_handle_ = server_handle_handle.clone();
         tokio::spawn(async move {
-            Server::bind("127.0.0.1:0".parse().unwrap())
+            Server::bind("0.0.0.0:0".parse().unwrap())
                 .handle(server_handle_handle_)
                 .serve(router.unwrap().into_make_service())
                 .await
diff --git a/packages/cli/src/serve/server.rs b/packages/cli/src/serve/server.rs
index b253db1..0a9ab18 100644
--- a/packages/cli/src/serve/server.rs
+++ b/packages/cli/src/serve/server.rs
@@ -563,7 +563,7 @@ pub fn get_rustls_with_mkcert(web_config: &WebHttpsConfig) -> Result<(String, St
             &cert_path,
             "localhost",
             "::1",
-            "127.0.0.1",
+            "0.0.0.0",
         ])
         .spawn();
 
diff --git a/packages/fullstack/src/axum_adapter.rs b/packages/fullstack/src/axum_adapter.rs
index 4d3a1c6..35bb80f 100644
--- a/packages/fullstack/src/axum_adapter.rs
+++ b/packages/fullstack/src/axum_adapter.rs
@@ -77,7 +77,7 @@ pub trait DioxusRouterExt<S> {
     /// # use dioxus_fullstack::prelude::*;
     /// #[tokio::main]
     /// async fn main() {
-    ///     let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 8080));
+    ///     let addr = std::net::SocketAddr::from(([0, 0, 0, 0], 8080));
     ///     let router = axum::Router::new()
     ///         // Register server functions routes with the default handler
     ///         .register_server_functions()
@@ -102,7 +102,7 @@ pub trait DioxusRouterExt<S> {
     /// # use std::sync::Arc;
     /// #[tokio::main]
     /// async fn main() {
-    ///     let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 8080));
+    ///     let addr = std::net::SocketAddr::from(([0, 0, 0, 0], 8080));
     ///     let router = axum::Router::new()
     ///         // Register server functions routes with the default handler
     ///         .register_server_functions_with_context(Arc::new(vec![Box::new(|| Box::new(1234567890u32))]))
@@ -122,7 +122,7 @@ pub trait DioxusRouterExt<S> {
     /// # use dioxus_fullstack::prelude::*;
     /// #[tokio::main]
     /// async fn main() {
-    ///     let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 8080));
+    ///     let addr = std::net::SocketAddr::from(([0, 0, 0, 0], 8080));
     ///     let router = axum::Router::new()
     ///         // Server side render the application, serve static assets, and register server functions
     ///         .serve_static_assets()
@@ -147,7 +147,7 @@ pub trait DioxusRouterExt<S> {
     /// # use dioxus_fullstack::prelude::*;
     /// #[tokio::main]
     /// async fn main() {
-    ///     let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 8080));
+    ///     let addr = std::net::SocketAddr::from(([0, 0, 0, 0], 8080));
     ///     let router = axum::Router::new()
     ///         // Server side render the application, serve static assets, and register server functions
     ///         .serve_dioxus_application(ServeConfig::new().unwrap(), app)
@@ -336,7 +336,7 @@ impl RenderHandleState {
 ///
 /// #[tokio::main]
 /// async fn main() {
-///     let addr = std::net::SocketAddr::from(([127, 0, 0, 1], 8080));
+///     let addr = std::net::SocketAddr::from(([0, 0, 0, 0], 8080));
 ///     let router = axum::Router::new()
 ///         // Register server functions, etc.
 ///         // Note you can use `register_server_functions_with_context`
diff --git a/packages/liveview/examples/axum.rs b/packages/liveview/examples/axum.rs
index d015259..a1686c2 100644
--- a/packages/liveview/examples/axum.rs
+++ b/packages/liveview/examples/axum.rs
@@ -17,7 +17,7 @@ fn app() -> Element {
 async fn main() {
     pretty_env_logger::init();
 
-    let addr: std::net::SocketAddr = ([127, 0, 0, 1], 3030).into();
+    let addr: std::net::SocketAddr = ([0, 0, 0, 0], 3030).into();
 
     let app = Router::new().with_app("/", app);
 
diff --git a/packages/liveview/examples/axum_stress.rs b/packages/liveview/examples/axum_stress.rs
index 80e146e..8d2c7fc 100644
--- a/packages/liveview/examples/axum_stress.rs
+++ b/packages/liveview/examples/axum_stress.rs
@@ -23,7 +23,7 @@ fn app() -> Element {
 async fn main() {
     pretty_env_logger::init();
 
-    let addr: std::net::SocketAddr = ([127, 0, 0, 1], 3030).into();
+    let addr: std::net::SocketAddr = ([0, 0, 0, 0], 3030).into();
 
     let view = dioxus_liveview::LiveViewPool::new();
 
diff --git a/packages/liveview/src/config.rs b/packages/liveview/src/config.rs
index 0f22eba..58b21c3 100644
--- a/packages/liveview/src/config.rs
+++ b/packages/liveview/src/config.rs
@@ -16,7 +16,7 @@ pub struct Config<R: LiveviewRouter> {
 impl<R: LiveviewRouter> Default for Config<R> {
     fn default() -> Self {
         Self {
-            address: dioxus_cli_config::fullstack_address_or_localhost(),
+            address: std::net::SocketAddr = ([0, 0, 0, 0], 3038).into(),
             router: R::create_default_liveview_router(),
             route: "/".to_string(),
         }
diff --git a/packages/playwright-tests/liveview.spec.js b/packages/playwright-tests/liveview.spec.js
index d830391..0f3c25b 100644
--- a/packages/playwright-tests/liveview.spec.js
+++ b/packages/playwright-tests/liveview.spec.js
@@ -2,7 +2,7 @@
 const { test, expect } = require('@playwright/test');
 
 test('button click', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the counter text.
   const main = page.locator('#main');
@@ -16,7 +16,7 @@ test('button click', async ({ page }) => {
 });
 
 test('svg', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the svg.
   const svg = page.locator('svg');
@@ -31,7 +31,7 @@ test('svg', async ({ page }) => {
 });
 
 test('raw attribute', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the div with the raw attribute.
   const div = page.locator('div.raw-attribute-div');
@@ -39,7 +39,7 @@ test('raw attribute', async ({ page }) => {
 });
 
 test('hidden attribute', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the div with the hidden attribute.
   const div = page.locator('div.hidden-attribute-div');
@@ -47,7 +47,7 @@ test('hidden attribute', async ({ page }) => {
 });
 
 test('dangerous inner html', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the div with the dangerous inner html.
   const div = page.locator('div.dangerous-inner-html-div');
@@ -55,7 +55,7 @@ test('dangerous inner html', async ({ page }) => {
 });
 
 test('input value', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the input with the value.
   const input = page.locator('input');
@@ -63,7 +63,7 @@ test('input value', async ({ page }) => {
 });
 
 test('style', async ({ page }) => {
-  await page.goto('http://127.0.0.1:3030');
+  await page.goto('http://0.0.0.0:3030');
 
   // Expect the page to contain the div with the style.
   const div = page.locator('div.style-div');
diff --git a/packages/playwright-tests/liveview/src/main.rs b/packages/playwright-tests/liveview/src/main.rs
index dd5804b..996e585 100644
--- a/packages/playwright-tests/liveview/src/main.rs
+++ b/packages/playwright-tests/liveview/src/main.rs
@@ -25,7 +25,7 @@ fn app() -> Element {
 
 #[tokio::main]
 async fn main() {
-    let addr: std::net::SocketAddr = ([127, 0, 0, 1], 3030).into();
+    let addr: std::net::SocketAddr = ([0, 0, 0, 0], 3030).into();
 
     let view = dioxus_liveview::LiveViewPool::new();
 
diff --git a/packages/playwright-tests/playwright.config.js b/packages/playwright-tests/playwright.config.js
index 9efa89c..60ec153 100644
--- a/packages/playwright-tests/playwright.config.js
+++ b/packages/playwright-tests/playwright.config.js
@@ -26,7 +26,7 @@ module.exports = defineConfig({
   /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
   use: {
     /* Base URL to use in actions like `await page.goto('/')`. */
-    // baseURL: 'http://127.0.0.1:3000',
+    // baseURL: 'http://0.0.0.0:3000',
 
     /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
     trace: "on-first-retry",
@@ -87,7 +87,7 @@ module.exports = defineConfig({
     {
       cwd: path.join(process.cwd(), "web"),
       command:
-        'cargo run --package dioxus-cli --release -- serve --addr "127.0.0.1" --port 9999',
+        'cargo run --package dioxus-cli --release -- serve --addr "0.0.0.0" --port 9999',
       port: 9999,
       timeout: 50 * 60 * 1000,
       reuseExistingServer: !process.env.CI,
@@ -96,7 +96,7 @@ module.exports = defineConfig({
     {
       cwd: path.join(process.cwd(), "static-generation"),
       command:
-        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform static-generation --addr "127.0.0.1" --port 2222',
+        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform static-generation --addr "0.0.0.0" --port 2222',
       port: 2222,
       timeout: 50 * 60 * 1000,
       reuseExistingServer: !process.env.CI,
@@ -105,7 +105,7 @@ module.exports = defineConfig({
     {
       cwd: path.join(process.cwd(), "fullstack"),
       command:
-        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform fullstack --addr "127.0.0.1" --port 3333',
+        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform fullstack --addr "0.0.0.0" --port 3333',
       port: 3333,
       timeout: 50 * 60 * 1000,
       reuseExistingServer: !process.env.CI,
@@ -114,7 +114,7 @@ module.exports = defineConfig({
     {
       cwd: path.join(process.cwd(), "suspense-carousel"),
       command:
-        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform fullstack --addr "127.0.0.1" --port 4040',
+        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform fullstack --addr "0.0.0.0" --port 4040',
       port: 4040,
       timeout: 50 * 60 * 1000,
       reuseExistingServer: !process.env.CI,
@@ -123,7 +123,7 @@ module.exports = defineConfig({
     {
       cwd: path.join(process.cwd(), "nested-suspense"),
       command:
-        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform fullstack --addr "127.0.0.1" --port 5050',
+        'cargo run --package dioxus-cli --release -- serve --force-sequential --platform fullstack --addr "0.0.0.0" --port 5050',
       port: 5050,
       timeout: 50 * 60 * 1000,
       reuseExistingServer: !process.env.CI,
diff --git a/packages/router/examples/simple_routes.rs b/packages/router/examples/simple_routes.rs
index 3ee695d..2a4c530 100644
--- a/packages/router/examples/simple_routes.rs
+++ b/packages/router/examples/simple_routes.rs
@@ -6,7 +6,7 @@ use std::str::FromStr;
 async fn main() {
     use axum::{extract::ws::WebSocketUpgrade, response::Html, routing::get, Router};
 
-    let listen_address: std::net::SocketAddr = ([127, 0, 0, 1], 3030).into();
+    let listen_address: std::net::SocketAddr = ([0, 0, 0, 0], 3030).into();
     let view = dioxus_liveview::LiveViewPool::new();
     let app = Router::new()
         .fallback(get(move || async move {
